initialize() {
    
  if (exists("slimgui")){
	  defineGlobal("simulation_id", 1111);
     defineGlobal("output_folder", "test");
     defineGlobal("simulation_path", paste(output_folder, "/", simulation_id));
     defineGlobal("pop_size", 200);
     defineGlobal("num_loci", 2);
     defineGlobal("mutation_rate", 0.001);
     defineGlobal("recap_Ne", 200);
     defineGlobal("seed", 123456);
     defineGlobal("sample_size_Ne_0", 50);
     defineGlobal("sample_size_Ne_1", 50);
     defineGlobal("sample_size_CMR_0", 50);
     defineGlobal("sample_size_CMR_1", 50);
     


  }else{
// your code to read the file

    // Read the config file made by python
    config_data = paste(readFile(config_file), sep="/n");
    config_lines = strsplit(config_data, "/n");

    p = Dictionary();
    for (line in config_lines) {
        parts = strsplit(line, "=");
        if (size(parts) == 2) {
            key = parts[0];
            value = parts[1];
            p.setValue(key, value);
        }
    }

    defineGlobal("params", p); // Get the parameters accessible to all script
	 defineGlobal("simulation_id", params.getValue("simulation_id"));
	 defineGlobal("output_folder", params.getValue("output_folder"));
	 defineGlobal("simulation_path", paste(output_folder, "/", simulation_id));
    defineGlobal("pop_size", asInteger(params.getValue("pop_size")));
    defineGlobal("num_loci", asInteger(params.getValue("num_loci")));
    defineGlobal("sample1_generation", asInteger(params.getValue("sample1_generation")));
    defineGlobal("sample2_generation", asInteger(params.getValue("sample2_generation")));
    defineGlobal("mutation_rate", asFloat(params.getValue("mutation_rate")));
    defineGlobal("recap_Ne", asInteger(params.getValue("recap_Ne")));
    defineGlobal("output_folder", params.getValue("output_folder"));
    defineGlobal("seed", asInteger(params.getValue("seed")));

    sizes_Ne = strsplit(params.getValue("sample_sizes_Ne"), ","); // samples 
    defineGlobal("sample_size_Ne_0", asInteger(sizes_Ne[0]));
    defineGlobal("sample_size_Ne_1", asInteger(sizes_Ne[1]));

    sizes_CMR = strsplit(params.getValue("sample_sizes_CMR"), ","); // samples 
    defineGlobal("sample_size_CMR", asInteger(sizes_CMR));

	  defineConstant("sample1_gen", sample1_generation);
	  defineConstant("end_generation", sample1_generation + sample2_generation);

}
    // SLiM model initialization
    initializeSLiMModelType("nonWF");
    initializeMutationRate(0);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1);
    initializeGenomicElement(g1, 0, num_loci);
    initializeRecombinationRate(0.5);

    // Tree Sequence Recording activation
    initializeTreeSeq(retainCoalescentOnly=F);
}

1 early() {

    sim.addSubpop("p1", pop_size); // Pop creation
}

(sample1_gen - 1) late() {

	 // First sample
    // Verify that there is enough individuals to sample
    if (size(p1.individuals) >= sample_size_Ne_0) {
        sampled_first_gen = sample(p1.individuals, sample_size_Ne_0, replace=F);
		  catn("[Sample 1] Echantillonnage à la génération " + sim.cycle);

        // Mark this individuals as "Remembered"
        for (ind in sampled_first_gen) {
            sim.treeSeqRememberIndividuals(ind, permanent=T);
        }

    } else {
        catn("Not enough individuals for the first sample");

// Premier échantillon génétique déjà fait à sample1_gen - 1
		}
}

// Capture-Marquage-Recapture à chaque génération suivante jusqu'au second sample

late() {
    // Numéro relatif de génération depuis t1
    i = sim.cycle - sample1_gen + 2;

    // Si on n’est pas dans l’intervalle, on sort
    if (i < 1 | i > end_generation)
        return;

    // Taille de la population
    N = p1.individualCount;

    // Premier échantillon (à la génération i-1)
    sample1 = sample(p1.individuals, sample_size_CMR, replace = F);

    // Deuxième échantillon (à la même génération ici, simplification)
    sample2 = sample(p1.individuals, sample_size_CMR, replace = F);

    // Comptage des recaptures
    matchCount = 0;
    for (ind1 in sample1) {
        for (ind2 in sample2) {
            if (ind1 == ind2) {
                matchCount = matchCount + 1;
            }
        }
    }

    // Estimation de la taille de population avec estimateur de Lincoln-Petersen modifié
    if (matchCount > 0) {
        estimatePopSize = ((sample_size_CMR + 1) * (sample_size_CMR + 1) / ((matchCount + 1) - 1));
    } else {
        estimatePopSize = 0;
    }

line = "Index=" + i + "\n";
line = line + "MatchCount=" + matchCount + "\n";
line = line + "EstimatedPopSize=" + estimatePopSize + "\n";
line = line + "\n";

writeFile(outputPath + "/census_match_output.txt", line, append = T);

	catn("CMR - Gen " + sim.cycle + ": MatchCount = " + matchCount + ", EstimatedPopSize = " + estimatePopSize);

}

reproduction() {
    K = pop_size;
    parents1 = p1.sampleIndividuals(K, replace=T);
    parents2 = p1.sampleIndividuals(K, replace=T);

    for (i in seqLen(K))
        p1.addCrossed(parents1[i], parents2[i]);

    self.active = 0;
}

//early() {
    // Individuals with an age of more than 1 tick are deleted from the pool
   //inds = p1.individuals;
    //inds[inds.age > 0].fitnessScaling = 0.0;
//}

survival() { 
// survival is independent of fitness; parents die, offspring live 
return (individual.age == 0); 
}

// Generation number is determined by pythono script
(end_generation - 1) late() {

    // Verify that there is enough individuals to sample
    if (size(p1.individuals) >= sample_size_Ne_1) {
        sampled_last_gen = sample(p1.individuals, sample_size_Ne_1, replace=F);
        catn("[Sample 2] Echantillonnage à la génération " + sim.cycle);

        // Mark this individuals as "Retained"
        for (ind in sampled_last_gen) {
            sim.treeSeqRememberIndividuals(ind, permanent=F);
        }
    } else {
        catn("Not enough individuals for the last sample");
    }

if (!exists("slimgui")) {
    // Output Folder
    output_folder = paste(strsplit(output_folder, " "), sep="");

    // Creating .trees file 
tree_file = output_folder + "/simulation.trees";
sim.treeSeqOutput(tree_file);

// Making of the path to the log file
log_file = output_folder + "/" + simulation_id + "_slim_log.txt";

// Merge the new file with the old one containing the parameters
appendLine = "log_file=" + log_file;
writeFile(config_file, appendLine + "\n", append=T);

if (sim.cycle == sample1_generation + sample2_generation) {
}

	writeFile(config_file, paste("SLiM seed:", getSeed()), append=T); // Add the SLiM seed 
	writeFile(config_file, paste("Final tree file:", tree_file), append=T);
	writeFile(config_file, "------------------------", append=T);
}else{
	sim.treeSeqOutput("C:/Users/poupe/simulation_pipeline/test/simulation.trees");
}
}

