initialize() {
    defineConstant("popSize", 200);     // Population size
    defineConstant("sampleSize_1", 10);   // Number of individuals to sample
	 defineConstant("sampleSize_2", 10);

    initializeSLiMModelType("nonWF");   // Non Wright-Fisher Model
    initializeMutationRate(0);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1);
    initializeGenomicElement(g1, 0, 0);
    initializeRecombinationRate(0.5);

    // Initialization of tree sequence recording
    initializeTreeSeq(retainCoalescentOnly=F);
}

1 early() {
    catn("🔹 Simulation started with seed: " + getSeed());
    sim.addSubpop("p1", popSize); // Pop creation
}

1 late() {
    catn("Selecting and saving individuals in the first generation :");

    // Verify that there is enough individuals to sample
    if (size(p1.individuals) >= sampleSize_1) {
        sampled_first_gen = sample(p1.individuals, sampleSize_1, replace=F);

        // Mark this individuals as "Remembered"
        for (ind in sampled_first_gen) {
            sim.treeSeqRememberIndividuals(ind, permanent=T);
        }

        catn("  ➝ Remembered individuals (Remembered - first generation) : "); 
		  catn(sampled_first_gen);
    } else {
        catn("Not enough individuals for the first sample");
    }
}

reproduction() {
    K = popSize;
    parents1 = p1.sampleIndividuals(K, replace=T);
    parents2 = p1.sampleIndividuals(K, replace=T);

    for (i in seqLen(K))
        p1.addCrossed(parents1[i], parents2[i]);

    self.active = 0;
}

early() {
    // Individuals with an age of more than 1 tick are deleted from the pool
    inds = p1.individuals;
    inds[inds.age > 0].fitnessScaling = 0.0;
}

11 late() {
    catn("Selecting and saving individuals in the last generation :");

    // Verify that there is enough individuals to sample
    if (size(p1.individuals) >= sampleSize_2) {
        sampled_last_gen = sample(p1.individuals, sampleSize_2, replace=F);

        // Mark this individuals as "Retained"
        for (ind in sampled_last_gen) {
            sim.treeSeqRememberIndividuals(ind, permanent=F);
        }

        catn(" Retained individuals (Retained - last generation) : ");
		  catn(sampled_last_gen);
    } else {
        catn("Not enough individuals for the last sample");
    }

    // Make sure the file output exists
    system("mkdir -p output_trees");

    // Save .trees file
    sim.treeSeqOutput("C:/Users/poupe/OneDrive/Bureau/Dossier_cours/M2_Semestre_1/Stage/SLiM/Models/output_trees/simulation.trees");
    catn("Data saved in : output_trees/simulation.trees");
}
